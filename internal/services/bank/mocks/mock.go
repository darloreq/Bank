// Code generated by MockGen. DO NOT EDIT.
// Source: init.go
//
// Generated by this command:
//
//	mockgen -source=init.go -destination=mocks/mock.go
//

// Package mock_bank is a generated GoMock package.
package mock_bank

import (
	entity "coolBank/internal/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBankReposI is a mock of BankReposI interface.
type MockBankReposI struct {
	ctrl     *gomock.Controller
	recorder *MockBankReposIMockRecorder
	isgomock struct{}
}

// MockBankReposIMockRecorder is the mock recorder for MockBankReposI.
type MockBankReposIMockRecorder struct {
	mock *MockBankReposI
}

// NewMockBankReposI creates a new mock instance.
func NewMockBankReposI(ctrl *gomock.Controller) *MockBankReposI {
	mock := &MockBankReposI{ctrl: ctrl}
	mock.recorder = &MockBankReposIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankReposI) EXPECT() *MockBankReposIMockRecorder {
	return m.recorder
}

// MakeUser mocks base method.
func (m *MockBankReposI) MakeUser(user entity.CreateUser) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeUser", user)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeUser indicates an expected call of MakeUser.
func (mr *MockBankReposIMockRecorder) MakeUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeUser", reflect.TypeOf((*MockBankReposI)(nil).MakeUser), user)
}

// PutMoneyInDB mocks base method.
func (m *MockBankReposI) PutMoneyInDB(userID int, amountPut entity.ChangeBalance) (entity.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMoneyInDB", userID, amountPut)
	ret0, _ := ret[0].(entity.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMoneyInDB indicates an expected call of PutMoneyInDB.
func (mr *MockBankReposIMockRecorder) PutMoneyInDB(userID, amountPut any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMoneyInDB", reflect.TypeOf((*MockBankReposI)(nil).PutMoneyInDB), userID, amountPut)
}

// ShowBalance mocks base method.
func (m *MockBankReposI) ShowBalance(userID int) (entity.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowBalance", userID)
	ret0, _ := ret[0].(entity.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowBalance indicates an expected call of ShowBalance.
func (mr *MockBankReposIMockRecorder) ShowBalance(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowBalance", reflect.TypeOf((*MockBankReposI)(nil).ShowBalance), userID)
}
